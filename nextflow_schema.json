{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/ggruber193/autwindslid/master/nextflow_schema.json",
  "title": "placeholder/autwindslid pipeline parameters",
  "description": "First steps",
  "type": "object",
  "definitions": {
      "input_output_options": {
          "title": "Input/output options",
          "type": "object",
          "fa_icon": "fas fa-terminal",
          "description": "Define where the pipeline should find input data and save output data.",
          "required": [
              "input",
              "outdir"
          ],
          "properties": {
              "input": {
                  "type": "string",
                  "format": "file-path",
                  "exists": true,
                  "mimetype": "text",
                  "description": "Input alignment file in Fasta, Phylip, Nexus or MSF format.",
                  "fa_icon": "fas fa-file-csv"
              },
              "outdir": {
                  "type": "string",
                  "format": "directory-path",
                  "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                  "fa_icon": "fas fa-folder-open"
              }
          }
      },
      "workflow_options": {
          "title": "Workflow options",
          "type": "object",
          "description": "",
          "default": "",
          "properties": {
              "run_mode": {
                  "type": "string",
                  "default": "full",
                  "enum": [
                      "full",
                      "model",
                      "split"
                  ],
                  "description": "Specify the what parts of the pipeline should be executed. \"split\" is used to only perform the splitting of the alignment. \"model\" is used to perform splitting and model selection. \"full\" is used to perform the whole pipeline.",
                  "help_text": "Using \"split\" outputs the individual subalignment windows per default."
              },
              "output_windows": {
                  "type": "boolean",
                  "description": "Flag used to also output the subalignment windows."
              },
              "window_size": {
                  "type": "integer",
                  "default": 300,
                  "description": "Number of nucleotides each window contains at most. Windows on the edge of the alignment can contain less nucleotides but at least half of the window size.",
                  "minimum": 1
              },
              "step_size": {
                  "type": "integer",
                  "default": 25,
                  "description": "Distance between two windows.",
                  "minimum": 1
              },
              "window_file": {
                  "type": "string",
                  "description": "CSV file with alignment ranges. If this parameter is provided the alignment ranges specified in the file are used instead of \"window_size\" and \"step_size\".",
                  "format": "file-path",
                  "help_text": "The CSV file should contain no header and have at least two columns. First the start position and second the end position. The positions are specified in a one-based format.\nOptionally a third column can be used to give each subalignment window a custom name, otherwise the midpoint of the window is used as the name. The name is used for the filename of the subalignment and also for the name of the tree in the final Nexus file of the pipeline.\nIf a nucleotide alignment (DNA/RNA) is used the start- and end-position of a window can be swapped to get the reverse complement of this subalignment window.\n\nExample:\n1,1000,gene1\n1001,2000,gene2"
              },
              "amb_seqs": {
                  "type": "string",
                  "default": "remove",
                  "enum": [
                      "remove",
                      "keep",
                      "skip"
                  ],
                  "description": "Change the behaviour of how subalignments containing sequences with only ambiguous characters. \"remove\" is used to remove sequences containing only ambiguous characters. \"ignore\" is used to skip subalignments with such sequences. \"keep\" does not manipulate or skip subalignments but if such sequences are present the pipeline will crash.",
                  "help_text": "Alignments that contain sequences with only ambiguous characters will result in error during tree reconstruction.\nThree ways are provided to handle these cases. \n- \"remove\": removes a sequence containing only ambiguous characters from the subalignment where this is the case.\n- \"ignore\": is used to skip subalignments with such sequences.\n- \"keep\": does not manipulate or skip subalignments but if such sequences are present the pipeline will crash."
              },
              "model_criterion": {
                  "type": "string",
                  "default": "bic",
                  "enum": [
                      "bic",
                      "aic",
                      "aicc"
                  ],
                  "description": "Specify the model selection criterion that should be used."
              },
              "model": {
                  "type": "string",
                  "description": "Can be used to specify the evolutionary model that should be used. In IQ-TREE format."
              },
              "model_finder_splits": {
                  "type": "boolean",
                  "description": "Flag that is used to perform model selection on each subalignment window separately."
              },
              "model_finder_params": {
                  "type": "string",
                  "description": "Can be used to pass additional parameters to the model selection process. The model selection process uses IQ-TREE ModelFinder. E.g. \"-mset GTR,...\". to restrict model selection."
              },
              "phylo_method": {
                  "type": "string",
                  "default": "iqtree2",
                  "description": "Specify the program that is used for performing tree reconstruction.",
                  "enum": [
                      "iqtree2",
                      "raxml-ng"
                  ]
              },
              "phylo_parameters": {
                  "type": "string",
                  "description": "Can be used to pass additional command-line parameters to the tree reconstruction process. E.g. \"-b 1000\" to perform tree reconstruction with bootstrap."
              },
              "output_format": {
                  "type": "string",
                  "default": "nexus,newick",
                  "description": "Format of the output file containing all trees that were created. Can either be nexus, newick or both. Specified using a comma separted list. E.g. \"newick,nexus\"",
                  "pattern": "(?:\\bnewick\\b|\\bnexus\\b)+"
              },
              "keep_tree_files": {
                  "type": "boolean",
                  "description": "Flag that is used to output all additional files that were generated during the tree reconstruction step."
              }
          },
          "required": [
              "amb_seqs",
              "model_criterion",
              "phylo_method",
              "output_format"
          ]
      },
      "generic_options": {
          "title": "Generic options",
          "type": "object",
          "fa_icon": "fas fa-file-import",
          "description": "Less common options for the pipeline, typically set in a config file.",
          "help_text": "These options are common to all nf-core pipelines and allow you to customize some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
          "properties": {
              "help": {
                  "type": "boolean",
                  "description": "Display help text.",
                  "fa_icon": "fas fa-question-circle"
              },
              "version": {
                  "type": "boolean",
                  "description": "Display version and exit.",
                  "fa_icon": "fas fa-question-circle",
                  "hidden": true
              },
              "publish_dir_mode": {
                  "type": "string",
                  "default": "copy",
                  "description": "Method used to save pipeline results to output directory.",
                  "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                  "fa_icon": "fas fa-copy",
                  "enum": [
                      "symlink",
                      "rellink",
                      "link",
                      "copy",
                      "copyNoFollow",
                      "move"
                  ],
                  "hidden": true
              },
              "monochrome_logs": {
                  "type": "boolean",
                  "description": "Do not use coloured log outputs.",
                  "fa_icon": "fas fa-palette",
                  "hidden": true
              },
              "validate_params": {
                  "type": "boolean",
                  "description": "Boolean whether to validate parameters against the schema at runtime",
                  "default": true,
                  "fa_icon": "fas fa-check-square",
                  "hidden": true
              },
              "validationShowHiddenParams": {
                  "type": "boolean",
                  "fa_icon": "far fa-eye-slash",
                  "description": "Show all params when using `--help`",
                  "hidden": true,
                  "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
              },
              "validationFailUnrecognisedParams": {
                  "type": "boolean",
                  "fa_icon": "far fa-check-circle",
                  "description": "Validation of parameters fails when an unrecognised parameter is found.",
                  "hidden": true,
                  "help_text": "By default, when an unrecognised parameter is found, it returns a warinig.",
                  "default": true
              },
              "validationLenientMode": {
                  "type": "boolean",
                  "fa_icon": "far fa-check-circle",
                  "description": "Validation of parameters in lenient more.",
                  "hidden": true,
                  "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
              }
          }
      },
      "institutional_config_options": {
          "title": "Institutional config options",
          "type": "object",
          "fa_icon": "fas fa-university",
          "description": "Parameters used to describe centralised config profiles. These should not be edited.",
          "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
          "properties": {
              "config_profile_name": {
                  "type": "string",
                  "description": "Institutional config name.",
                  "hidden": true,
                  "fa_icon": "fas fa-users-cog"
              },
              "config_profile_description": {
                  "type": "string",
                  "description": "Institutional config description.",
                  "hidden": true,
                  "fa_icon": "fas fa-users-cog"
              }
          }
      },
      "max_job_request_options": {
          "title": "Max job request options",
          "type": "object",
          "fa_icon": "fab fa-acquisitions-incorporated",
          "description": "Set the top limit for requested resources for any single job.",
          "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
          "properties": {
              "max_cpus": {
                  "type": "integer",
                  "description": "Maximum number of CPUs that can be requested for any single job.",
                  "default": 1,
                  "fa_icon": "fas fa-microchip",
                  "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
              },
              "max_memory": {
                  "type": "string",
                  "description": "Maximum amount of memory that can be requested for any single job.",
                  "default": "8.GB",
                  "fa_icon": "fas fa-memory",
                  "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                  "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
              },
              "max_time": {
                  "type": "string",
                  "description": "Maximum amount of time that can be requested for any single job.",
                  "default": "1.h",
                  "fa_icon": "far fa-clock",
                  "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                  "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
              }
          }
      }
  },
  "allOf": [
      {
          "$ref": "#/definitions/input_output_options"
      },
      {
          "$ref": "#/definitions/workflow_options"
      },
      {
          "$ref": "#/definitions/generic_options"
      },
      {
          "$ref": "#/definitions/institutional_config_options"
      },
      {
          "$ref": "#/definitions/max_job_request_options"
      }
  ]
}